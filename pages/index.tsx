import React, { useEffect } from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import NextLink from 'next/link';
import { Box, Button, Link, TextField, Typography } from '@mui/material';
import { Controller, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { useRouter } from 'next/router';
import { PasswordInput } from '@/components/atoms/PasswordInput';

import authService from '@/services/auth.service';
import { loginSchema } from '@/form-schemas/loginSchema';
import { Head } from '@/components/atoms/Head';
import Image from 'next/image';
import { LockOutlined } from '@mui/icons-material';
import { ROUTES } from '@/constans/routes';
import { useAppDispatch } from '@hooks/redux';
import { logIn } from '@store/users/reducer';
import { ROLES } from '@/constans/roles';
import showNotification from '@/components/atoms/Notification';
import NextHeader from 'next/head';
import { useTranslation } from 'react-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

export interface ILoginForm {
  email: string;
  password: string;
}

const defaultLoginValues: ILoginForm = {
  email: '',
  password: ''
};

const Login: NextPage = () => {
  /*hooks*/
  const router = useRouter();
  const dispatch = useAppDispatch();
  const { t, i18n } = useTranslation();

  const {
    reset: loginReset,
    control: loginControl,
    handleSubmit: handleLoginSubmit,
    getValues: getLoginValues,
    formState: { errors: loginErrors }
  } = useForm<ILoginForm>({
    defaultValues: defaultLoginValues,
    // @ts-ignore
    resolver: yupResolver(loginSchema)
  });

  const login = async () => {
    try {
      const { email, password } = getLoginValues();

      const response = await authService.login({ email, password });

      if (response.status === 200) {
        dispatch(
          logIn({
            email: email,
            roleName: response.data.role,
            userName: 'test'
          })
        );
        loginReset();
        await router.push(
          response.data.role === ROLES.ADMIN
            ? ROUTES.ADMIN_DASHBOARD_PAYS
            : ROUTES.USER_DASHBOARD
        );
      }
    } catch (e) {
      if (
        e.response.status === 400 ||
        e.response.status === 404 ||
        e.response.status === 401 ||
        e.response.status === 403
      ) {
        return showNotification({
          type: 'error',
          message: e?.response?.data?.message,
          timeout: 2000
        });
      }
    }
  };

  useEffect(() => {
    dispatch(
      logIn({
        loggedIn: false,
        email: ''
      })
    );
  }, []);

  return (
    <>
      <NextHeader>
        <title>YVEA</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </NextHeader>

      <Head title="Login" />

      <form
        key={0}
        style={{ marginBottom: '5rem' }}
        className="flex flex-col items-center w-[324px] mx-1"
        onSubmit={handleLoginSubmit(login)}
      >
        <Box
          display="flex"
          flexDirection="column"
          alignItems="center"
          sx={{
            width: { xs: '90%', md: '30%', lg: '25%' },
            margin: '10rem auto'
          }}
        >
          <Box width={'100%'} marginBottom={'3rem'}>
            <Image
              src={i18n.language==='en'?'/icons/en_logo.svg':'/icons/fr_logo.svg'}
              alt={'ezxport en_logo'}
              width={0}
              height={0}
              style={{ width: '100%', height: '100%', objectFit: 'contain' }}
            />
          </Box>
          <LockOutlined sx={{ fontSize: '28px' }} />
          <Typography variant={'h6'} sx={{ mb: '2rem' }}>
            {t('connection')}
          </Typography>
          <Controller
            name="email"
            control={loginControl}
            rules={{ required: true }}
            render={({ field: { value, onChange } }) => (
              <Box sx={{ width: '100%' }}>
                <Typography
                  variant={'body2'}
                  sx={{ mb: '-10px', textAlign: 'left', color: 'grey.700' }}
                >
                  {t('email')}
                </Typography>
                <TextField
                  placeholder={'example@email.com'}
                  value={value}
                  onChange={onChange}
                  error={!!loginErrors.email}
                  margin="normal"
                  fullWidth
                />
              </Box>
            )}
          />
          <Controller
            name="password"
            control={loginControl}
            rules={{ required: true }}
            render={({ field: { value, onChange } }) => (
              <Box sx={{ width: '100%' }}>
                <Typography
                  variant={'body2'}
                  sx={{ mb: '-10px', textAlign: 'left', color: 'grey.700' }}
                >
                  {t('password')}
                </Typography>
                <PasswordInput
                  value={value}
                  onChange={onChange}
                  error={!!loginErrors?.password}
                />
              </Box>
            )}
          />

          <Typography
            variant="body1"
            marginBottom={2}
            marginTop={1}
            fontSize={14}
            textAlign="right"
            width="100%"
          >
            <Link
              href="/forgot-password"
              underline="hover"
              component={NextLink}
            >
              {t('forgot_password')}
            </Link>
          </Typography>
          <Box marginY={2} width="100%">
            <Button
              variant="contained"
              color="secondary"
              type="submit"
              sx={{ textTransform: 'Capitalize' }}
              fullWidth
            >
              {t('login')}
            </Button>
          </Box>
          <Box marginY={2} width="100%">
            <Button
              variant="text"
              color="secondary"
              onClick={() => router.push('/register')}
              sx={{ textTransform: 'Capitalize' }}
              fullWidth
            >
              {t('register')}
            </Button>
          </Box>
        </Box>
      </form>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<any> = async ({
  locale
}) => ({
  props: {
    ...(await serverSideTranslations(locale ?? 'en', ['common']))
  }
});

export default Login;
